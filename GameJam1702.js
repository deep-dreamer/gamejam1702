// Generated by Haxe 3.4.0
(function () { "use strict";
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var oimo_js_engine_OMain = function(canvas) {
	this.canvas = canvas;
	this.input = new oimo_js_engine_OInput();
	this.__imageLoader = new oimo_js_engine_OImageLoader();
	this.__imageMap = new haxe_ds_StringMap();
	this.__setup();
};
oimo_js_engine_OMain.__name__ = true;
oimo_js_engine_OMain.prototype = {
	__setup: function() {
		var _gthis = this;
		this.__state = 0;
		this.frameCount = 0;
		this.setup();
		if(this.__state != 1) {
			throw new js__$Boot_HaxeError("call init()");
		}
		this.__state = 2;
		var _gthis1 = this;
		if(this.__state != 2) {
			throw new js__$Boot_HaxeError("invalid call");
		}
		var touchCount = 0;
		var firstTouchId = -1;
		var scalingRatio = window.devicePixelRatio / this.__bufferScalingRatio;
		var elementX = function() {
			return _gthis1.canvas.getBoundingClientRect().left;
		};
		var elementY = function() {
			return _gthis1.canvas.getBoundingClientRect().top;
		};
		var body = window.document.body;
		body.addEventListener("touchstart",function(e) {
			if(e.cancelable) {
				e.preventDefault();
			}
			if(firstTouchId == -1) {
				firstTouchId = e.changedTouches[0].identifier;
			}
			var _g1 = 0;
			var _g = e.changedTouches.length;
			while(_g1 < _g) {
				var touch = e.changedTouches[_g1++];
				if(touch.identifier == firstTouchId) {
					var tmp = touch.clientX - elementX();
					_gthis1.input._ntouchX = tmp * scalingRatio;
					var tmp1 = touch.clientY - elementY();
					_gthis1.input._ntouchY = tmp1 * scalingRatio;
					_gthis1.input._ntouch = true;
				}
			}
			touchCount += e.changedTouches.length;
		});
		body.addEventListener("touchmove",function(e1) {
			if(e1.cancelable) {
				e1.preventDefault();
			}
			var _g11 = 0;
			var _g2 = e1.touches.length;
			while(_g11 < _g2) {
				var touch1 = e1.touches[_g11++];
				if(touch1.identifier == firstTouchId) {
					var tmp2 = touch1.clientX - elementX();
					_gthis1.input._ntouchX = tmp2 * scalingRatio;
					var tmp3 = touch1.clientY - elementY();
					_gthis1.input._ntouchY = tmp3 * scalingRatio;
				}
			}
		});
		var touchend = function(e2) {
			if(e2.cancelable) {
				e2.preventDefault();
			}
			var _g12 = 0;
			var _g3 = e2.changedTouches.length;
			while(_g12 < _g3) {
				var touch2 = e2.changedTouches[_g12++];
				if(touch2.identifier == firstTouchId) {
					firstTouchId = -1;
					var touchend1 = touch2.clientX - elementX();
					_gthis1.input._ntouchX = touchend1 * scalingRatio;
					var touchend2 = touch2.clientY - elementY();
					_gthis1.input._ntouchY = touchend2 * scalingRatio;
					_gthis1.input._ntouch = false;
				}
			}
			touchCount -= e2.changedTouches.length;
		};
		body.addEventListener("touchend",touchend);
		body.addEventListener("touchcancel",touchend);
		body.addEventListener("mousedown",function(e3) {
			if(e3.cancelable) {
				e3.preventDefault();
			}
			switch(e3.button) {
			case 0:
				_gthis1.input._nmouseL = true;
				break;
			case 2:
				_gthis1.input._nmouseR = true;
				break;
			}
			var tmp4 = e3.clientX - elementX();
			_gthis1.input._nmouseX = tmp4 * scalingRatio;
			var tmp5 = e3.clientY - elementY();
			_gthis1.input._nmouseY = tmp5 * scalingRatio;
		});
		body.addEventListener("mouseup",function(e4) {
			if(e4.cancelable) {
				e4.preventDefault();
			}
			switch(e4.button) {
			case 0:
				_gthis1.input._nmouseL = false;
				break;
			case 2:
				_gthis1.input._nmouseR = false;
				break;
			}
			var tmp6 = e4.clientX - elementX();
			_gthis1.input._nmouseX = tmp6 * scalingRatio;
			var tmp7 = e4.clientY - elementY();
			_gthis1.input._nmouseY = tmp7 * scalingRatio;
		});
		body.addEventListener("mousemove",function(e5) {
			if(e5.cancelable) {
				e5.preventDefault();
			}
			var tmp8 = e5.clientX - elementX();
			_gthis1.input._nmouseX = tmp8 * scalingRatio;
			var tmp9 = e5.clientY - elementY();
			_gthis1.input._nmouseY = tmp9 * scalingRatio;
		});
		body.oncontextmenu = function(e6) {
			return false;
		};
		this.__imageLoader.waitForAll(function() {
			_gthis.__state = 3;
			_gthis.onLoad();
			_gthis.__state = 4;
			var _this = _gthis.__timer;
			_this.running = true;
			_this.expectedNextTime = new Date().getTime();
			_this.loop();
		});
	}
	,setup: function() {
		throw new js__$Boot_HaxeError("override this");
	}
	,__loop: function() {
		if(this.__state != 4) {
			throw new js__$Boot_HaxeError("invalid call");
		}
		this.frameCount++;
		this.input._update();
		this.loop();
		this.__screenGraphics.image(this.buffer,0,0,this.__width,this.__height,0,0,this.__screenWidth,this.__screenHeight);
	}
	,loop: function() {
		throw new js__$Boot_HaxeError("override this");
	}
	,onLoad: function() {
	}
};
var GameJam1702 = function(canvas) {
	this.time = 0;
	oimo_js_engine_OMain.call(this,canvas);
};
GameJam1702.__name__ = true;
GameJam1702.main = function() {
	new GameJam1702(window.document.getElementById("canvas"));
};
GameJam1702.__super__ = oimo_js_engine_OMain;
GameJam1702.prototype = $extend(oimo_js_engine_OMain.prototype,{
	setup: function() {
		GameJam1702.o = this;
		var ua = window.navigator.userAgent;
		if(ua.indexOf("iPad") == -1 && (ua.indexOf("iPhone") != -1 || ua.indexOf("Android") != -1)) {
			var meta = window.document.createElement("meta");
			meta.setAttribute("name","viewport");
			meta.setAttribute("content","width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no");
			window.document.head.appendChild(meta);
			window.document.body.style.margin = "0";
		}
		var a = window.innerWidth / 100;
		var b = window.innerHeight / 100;
		if(this.__state != 0) {
			throw new js__$Boot_HaxeError("invalid call");
		}
		this.__state = 1;
		var pixelRatio = window.devicePixelRatio;
		this.__bufferScalingRatio = (a < b?a:b) * window.devicePixelRatio | 0;
		this.__width = 100;
		this.__height = 100;
		this.buffer = new oimo_js_graphics_OImage(this.__width,this.__height,oimo_js_engine_OGraphicsMode.Canvas2D);
		this.gl = this.buffer.gl;
		this.c2d = this.buffer.c2d;
		this.__screenWidth = this.__width * this.__bufferScalingRatio;
		this.__screenHeight = this.__height * this.__bufferScalingRatio;
		this.canvas.style.width = this.__screenWidth / pixelRatio + "px";
		this.canvas.style.height = this.__screenHeight / pixelRatio + "px";
		this.canvas.width = this.__screenWidth;
		this.canvas.height = this.__screenHeight;
		this.__screenGraphics = new oimo_js_graphics_OGraphics2D(this.canvas.getContext("2d",null));
		this.__timer = new oimo_js_engine_OTimer(50,$bind(this,this.__loop));
		this.g = new oimo_js_graphics_OGraphics2D(this.c2d);
		if(this.__state != 0 && this.__state != 1) {
			throw new js__$Boot_HaxeError("invalid call");
		}
		var image = new Image();
		image.src = "1.gif";
		this.__imageMap.set("1.gif",image);
		this.__imageLoader.add(image);
		if(this.__state != 0 && this.__state != 1) {
			throw new js__$Boot_HaxeError("invalid call");
		}
		var image1 = new Image();
		image1.src = "2.gif";
		this.__imageMap.set("2.gif",image1);
		this.__imageLoader.add(image1);
		if(this.__state != 0 && this.__state != 1) {
			throw new js__$Boot_HaxeError("invalid call");
		}
		var image2 = new Image();
		image2.src = "3.gif";
		this.__imageMap.set("3.gif",image2);
		this.__imageLoader.add(image2);
		this.initGame();
	}
	,onLoad: function() {
		var image = this.__imageMap.get("1.gif");
		var w = image.width;
		var h = image.height;
		var res = new oimo_js_graphics_OImage(w,h,oimo_js_engine_OGraphicsMode.Canvas2D);
		res.c2d.drawImage(image,0,0,w,h,0,0,w,h);
		this.o1 = res;
		var image1 = this.__imageMap.get("2.gif");
		var w1 = image1.width;
		var h1 = image1.height;
		var res1 = new oimo_js_graphics_OImage(w1,h1,oimo_js_engine_OGraphicsMode.Canvas2D);
		res1.c2d.drawImage(image1,0,0,w1,h1,0,0,w1,h1);
		this.o2 = res1;
		var image2 = this.__imageMap.get("3.gif");
		var w2 = image2.width;
		var h2 = image2.height;
		var res2 = new oimo_js_graphics_OImage(w2,h2,oimo_js_engine_OGraphicsMode.Canvas2D);
		res2.c2d.drawImage(image2,0,0,w2,h2,0,0,w2,h2);
		this.o3 = res2;
	}
	,initGame: function() {
		this.ps = [];
		var _g = 0;
		while(_g < 1000) {
			++_g;
			this.ps.push(new Person(this.randIn(5,95),this.randIn(5,95)));
		}
		this.m = new PMap();
		this.pl = new Person(10,10);
		this.pl.affected = true;
		this.ps.push(this.pl);
		this.count = 0;
	}
	,randIn: function(a,b) {
		return a + Math.random() * (b - a);
	}
	,loop: function() {
		var _gthis = this;
		this.count++;
		var _this = this.g;
		var tmp = _this.g2d.fillStyle;
		_this.g2d.fillStyle = "rgb(" + (0.5 | 0) + "," + (0.5 | 0) + "," + (0.5 | 0) + ")";
		_this.g2d.fillRect(0,0,_this.g2d.canvas.width,_this.g2d.canvas.height);
		_this.g2d.fillStyle = tmp;
		if(this.count < 500) {
			this.g.image(this.o1,0,0,100,100,0,0,100,100);
			if(this.count > 50 && (this.input.mouseL || this.input.touch)) {
				this.count = 500;
			}
			return;
		}
		if(this.count < 1000) {
			this.g.image(this.o2,0,0,100,100,0,0,100,100);
			if(this.count > 550 && (this.input.mouseL || this.input.touch)) {
				this.count = 1000;
			}
			return;
		}
		if(this.count > 10000100) {
			this.g.image(this.o3,0,0,100,100,this.randIn(-3,3) | 0,this.randIn(-3,3) | 0,100,100);
			if(this.count > 10000200 && (this.input.dtouch == -1 || this.input.dmouseL == -1)) {
				var s = (this.time / 50 | 0) + "秒で人類を滅亡させた。 " + window.location.href;
				var tmp1 = encodeURIComponent(s);
				window.location.href = "https://twitter.com/intent/tweet?text=" + tmp1;
			}
			return;
		}
		this.m.clear();
		if(this.input.touch || this.input.mouseX != 0 || this.input.mouseY != 0) {
			var dx = (this.input.touch?this.input.touchX:this.input.mouseX) - this.pl.x;
			var dy = (this.input.touch?this.input.touchY:this.input.mouseY) - this.pl.y;
			var invL = 1 / Math.sqrt(dx * dx + dy * dy + 1e-6);
			dx *= invL;
			dy *= invL;
			this.pl.x += dx * 0.05;
			this.pl.y += dy * 0.05;
		}
		var _g = 0;
		var _g1 = this.ps;
		while(_g < _g1.length) {
			var p = _g1[_g];
			++_g;
			p.entryMap(this.m);
		}
		var _g2 = 0;
		var _g11 = this.ps;
		while(_g2 < _g11.length) {
			var p1 = [_g11[_g2]];
			++_g2;
			var mx = [0];
			var my = [0];
			var prob = [0];
			var tmp2 = this.m;
			var tmp3 = (function(prob1,my1,mx1,p2) {
				return function(p21) {
					var dst = _gthis.randIn(0.01,0.05);
					var dx1 = p21.x - p2[0].x;
					var dy1 = p21.y - p2[0].y;
					if(dx1 > 50) {
						dx1 -= 100;
					}
					if(dx1 < -50) {
						dx1 += 100;
					}
					if(dy1 > 50) {
						dy1 -= 100;
					}
					if(dy1 < -50) {
						dy1 += 100;
					}
					var len = Math.sqrt(dx1 * dx1 + dy1 * dy1);
					var weight = len < 10?(10 - len) / 10:0;
					weight = Math.sqrt(weight);
					var invL1 = weight / (len + 1e-8);
					if(len < 0.3) {
						invL1 *= -5;
					} else if(len < 0.8) {
						invL1 *= -3;
					} else if(len < 1.5) {
						invL1 *= -1;
					} else if(p2[0].affected && !p21.affected) {
						invL1 *= 1;
					} else if(!p2[0].affected && p21.affected) {
						invL1 *= -1;
					} else {
						invL1 = 0;
					}
					dx1 *= invL1;
					dy1 *= invL1;
					mx1[0] += dx1 * dst;
					my1[0] += dy1 * dst;
					if(!p2[0].affected && p21.affected) {
						if(len < 4) {
							prob1[0] += 0.005 * (4 - len) / 4;
						}
					}
				};
			})(prob,my,mx,p1);
			p1[0].search(tmp2,tmp3);
			var maxm = p1[0].pr;
			if(mx[0] * mx[0] + my[0] * my[0] > maxm * maxm) {
				var invL2 = maxm / Math.sqrt(mx[0] * mx[0] + my[0] * my[0]);
				mx[0] *= invL2;
				my[0] *= invL2;
			}
			if(Math.random() < prob[0]) {
				p1[0].affected = true;
			}
			p1[0].x += mx[0];
			p1[0].y += my[0];
			p1[0].update();
		}
		var _g3 = 0;
		var _g12 = this.ps;
		while(_g3 < _g12.length) {
			var p3 = _g12[_g3];
			++_g3;
			p3.draw(this.g);
		}
		var _this1 = this.g;
		_this1.g2d.fillStyle = "rgba(" + (255.5 | 0) + "," + (255.5 | 0) + "," + (0.5 | 0) + "," + (Math.sin(this.count * 0.05) * 0.5 + 0.5) + ")";
		_this1.fillEnabled = true;
		var _this2 = this.g;
		var x = Math.floor(this.pl.x - 1);
		var y = Math.floor(this.pl.y - 1);
		if(_this2.fillEnabled) {
			_this2.g2d.fillRect(x,y,3,3);
		}
		if(_this2.strokeEnabled) {
			_this2.g2d.strokeRect(x,y,3,3);
		}
		var cleared = true;
		var _g4 = 0;
		var _g13 = this.ps;
		while(_g4 < _g13.length) {
			var p4 = _g13[_g4];
			++_g4;
			if(!p4.affected) {
				cleared = false;
			}
		}
		if(cleared && this.count < 10000000) {
			this.count = 10000000;
		} else {
			this.time++;
		}
		this.pl.draw(this.g);
	}
});
Math.__name__ = true;
var PMap = function() {
	this.gs = [];
	var _g = 0;
	while(_g < 10) {
		var i = _g++;
		this.gs.push([]);
		var _g1 = 0;
		while(_g1 < 10) {
			++_g1;
			this.gs[i].push([]);
		}
	}
};
PMap.__name__ = true;
PMap.prototype = {
	clear: function() {
		var _g = 0;
		while(_g < 10) {
			var i = _g++;
			var _g1 = 0;
			while(_g1 < 10) this.gs[i][_g1++] = [];
		}
	}
};
var Person = function(x,y) {
	this.x = x;
	this.y = y;
	this.pr = Math.random() * 0.05 + 0.01;
	this.affected = false;
};
Person.__name__ = true;
Person.prototype = {
	update: function() {
		if(this.affected) {
			this.pr = 0.015;
			this.x += (Math.random() - 0.5) * 0.1;
			this.y += (Math.random() - 0.5) * 0.1;
		} else {
			this.x += (Math.random() - 0.5) * 0.03;
			this.y += (Math.random() - 0.5) * 0.03;
		}
		if(this.x < 0) {
			this.x += 100;
		}
		if(this.y < 0) {
			this.y += 100;
		}
		if(this.x > 100) {
			this.x -= 100;
		}
		if(this.y > 100) {
			this.y -= 100;
		}
	}
	,draw: function(g) {
		g.strokeEnabled = false;
		if(this.affected) {
			g.g2d.fillStyle = "rgba(" + (255.5 | 0) + "," + (0.5 | 0) + "," + (0.5 | 0) + "," + 1.0 + ")";
			g.fillEnabled = true;
		} else {
			g.g2d.fillStyle = "rgba(" + (0.5 | 0) + "," + (255.5 | 0) + "," + (0.5 | 0) + "," + 1.0 + ")";
			g.fillEnabled = true;
		}
		var x = this.x | 0;
		var y = this.y | 0;
		if(g.fillEnabled) {
			g.g2d.fillRect(x,y,1,1);
		}
		if(g.strokeEnabled) {
			g.g2d.strokeRect(x,y,1,1);
		}
	}
	,entryMap: function(m) {
		this.gx = this.x / 10 | 0;
		this.gy = this.y / 10 | 0;
		if(this.gx < 0) {
			this.gx = 0;
		}
		if(this.gx > 9) {
			this.gx = 9;
		}
		if(this.gy < 0) {
			this.gy = 0;
		}
		if(this.gy > 9) {
			this.gy = 9;
		}
		m.gs[this.gx][this.gy].push(this);
	}
	,search: function(m,func) {
		var _g1 = this.gx - 1;
		var _g = this.gx + 2;
		while(_g1 < _g) {
			var i = _g1++;
			var _g3 = this.gy - 1;
			var _g2 = this.gy + 2;
			while(_g3 < _g2) {
				var _g4 = 0;
				var _g5 = m.gs[(i + 10) % 10][(_g3++ + 10) % 10];
				while(_g4 < _g5.length) {
					var p = _g5[_g4];
					++_g4;
					if(p != this) {
						func(p);
					}
				}
			}
		}
	}
};
var haxe_IMap = function() { };
haxe_IMap.__name__ = true;
var haxe_ds_StringMap = function() {
	this.h = { };
};
haxe_ds_StringMap.__name__ = true;
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	set: function(key,value) {
		if(__map_reserved[key] != null) {
			this.setReserved(key,value);
		} else {
			this.h[key] = value;
		}
	}
	,get: function(key) {
		if(__map_reserved[key] != null) {
			return this.getReserved(key);
		}
		return this.h[key];
	}
	,setReserved: function(key,value) {
		if(this.rh == null) {
			this.rh = { };
		}
		this.rh["$" + key] = value;
	}
	,getReserved: function(key) {
		if(this.rh == null) {
			return null;
		} else {
			return this.rh["$" + key];
		}
	}
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	this.message = String(val);
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
js__$Boot_HaxeError.__name__ = true;
js__$Boot_HaxeError.wrap = function(val) {
	if((val instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
});
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) {
					return o[0];
				}
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) {
						str += "," + js_Boot.__string_rec(o[i],s);
					} else {
						str += js_Boot.__string_rec(o[i],s);
					}
				}
				return str + ")";
			}
			var l = o.length;
			var i1;
			var str1 = "[";
			s += "\t";
			var _g11 = 0;
			var _g2 = l;
			while(_g11 < _g2) {
				var i2 = _g11++;
				str1 += (i2 > 0?",":"") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str2 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str2.length != 2) {
			str2 += ", \n";
		}
		str2 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str2 += "\n" + s + "}";
		return str2;
	case "string":
		return o;
	default:
		return String(o);
	}
};
var js_html__$CanvasElement_CanvasUtil = function() { };
js_html__$CanvasElement_CanvasUtil.__name__ = true;
js_html__$CanvasElement_CanvasUtil.getContextWebGL = function(canvas,attribs) {
	var _g = 0;
	var _g1 = ["webgl","experimental-webgl"];
	while(_g < _g1.length) {
		var name = _g1[_g];
		++_g;
		var ctx = canvas.getContext(name,attribs);
		if(ctx != null) {
			return ctx;
		}
	}
	return null;
};
var oimo_js_engine_OBlendMode = { __ename__ : true, __constructs__ : ["Blend","Add","Multiply","Screen"] };
oimo_js_engine_OBlendMode.Blend = ["Blend",0];
oimo_js_engine_OBlendMode.Blend.__enum__ = oimo_js_engine_OBlendMode;
oimo_js_engine_OBlendMode.Add = ["Add",1];
oimo_js_engine_OBlendMode.Add.__enum__ = oimo_js_engine_OBlendMode;
oimo_js_engine_OBlendMode.Multiply = ["Multiply",2];
oimo_js_engine_OBlendMode.Multiply.__enum__ = oimo_js_engine_OBlendMode;
oimo_js_engine_OBlendMode.Screen = ["Screen",3];
oimo_js_engine_OBlendMode.Screen.__enum__ = oimo_js_engine_OBlendMode;
var oimo_js_engine_OGraphicsMode = { __ename__ : true, __constructs__ : ["WebGL","Canvas2D"] };
oimo_js_engine_OGraphicsMode.WebGL = ["WebGL",0];
oimo_js_engine_OGraphicsMode.WebGL.__enum__ = oimo_js_engine_OGraphicsMode;
oimo_js_engine_OGraphicsMode.Canvas2D = ["Canvas2D",1];
oimo_js_engine_OGraphicsMode.Canvas2D.__enum__ = oimo_js_engine_OGraphicsMode;
var oimo_js_engine_OImageLoader = function() {
	this.images = [];
};
oimo_js_engine_OImageLoader.__name__ = true;
oimo_js_engine_OImageLoader.prototype = {
	add: function(image) {
		this.images.push(image);
	}
	,waitForAll: function(onFinished) {
		var waitingCount = this.images.length;
		if(waitingCount == 0) {
			onFinished();
			return;
		}
		var _g = 0;
		var _g1 = this.images;
		while(_g < _g1.length) {
			var image = _g1[_g];
			++_g;
			image.onload = function() {
				if((waitingCount -= 1) == 0) {
					onFinished();
				}
			};
		}
	}
};
var oimo_js_engine_OInput = function() {
	this.ptouchX = 0;
	this.ptouchY = 0;
	this.touchX = 0;
	this.touchY = 0;
	this.dtouchX = 0;
	this.dtouchY = 0;
	this._ntouchX = 0;
	this._ntouchY = 0;
	this.ptouch = false;
	this.touch = false;
	this._ntouch = false;
	this.dtouch = 0;
	this.pmouseX = 0;
	this.pmouseY = 0;
	this.mouseX = 0;
	this.mouseY = 0;
	this.dmouseX = 0;
	this.dmouseY = 0;
	this._nmouseX = 0;
	this._nmouseY = 0;
	this.pmouseL = false;
	this.pmouseR = false;
	this.mouseL = false;
	this.mouseR = false;
	this.dmouseL = 0;
	this.dmouseR = 0;
	this._nmouseL = false;
	this._nmouseR = false;
};
oimo_js_engine_OInput.__name__ = true;
oimo_js_engine_OInput.prototype = {
	_update: function() {
		this.ptouchX = this.touchX;
		this.ptouchY = this.touchY;
		this.touchX = this._ntouchX;
		this.touchY = this._ntouchY;
		this.dtouchX = this.touchX - this.ptouchX;
		this.dtouchY = this.touchY - this.ptouchY;
		this.ptouch = this.touch;
		this.touch = this._ntouch;
		this.dtouch = (this.touch?1:0) - (this.ptouch?1:0);
		if(this.dtouch == 1) {
			this.ptouchX = this.touchX;
			this.ptouchY = this.touchY;
		}
		this.pmouseX = this.mouseX;
		this.pmouseY = this.mouseY;
		this.mouseX = this._nmouseX;
		this.mouseY = this._nmouseY;
		this.dmouseX = this.mouseX - this.pmouseX;
		this.dmouseY = this.mouseY - this.pmouseY;
		this.pmouseL = this.mouseL;
		this.pmouseR = this.mouseR;
		this.mouseL = this._nmouseL;
		this.mouseR = this._nmouseR;
		this.dmouseL = (this.mouseL?1:0) - (this.pmouseL?1:0);
		this.dmouseR = (this.mouseR?1:0) - (this.pmouseR?1:0);
	}
};
var oimo_js_engine_OTimer = function(targetFPS,targetFunction) {
	this.targetFPS = targetFPS;
	this.targetFunction = targetFunction;
	this.running = false;
};
oimo_js_engine_OTimer.__name__ = true;
oimo_js_engine_OTimer.prototype = {
	run: function() {
		this.running = true;
		this.expectedNextTime = new Date().getTime();
		this.loop();
	}
	,stop: function() {
		this.running = false;
	}
	,loop: function() {
		this.targetFunction();
		var en = new Date().getTime();
		var sleep = this.expectedNextTime + 1000.0 / this.targetFPS - en;
		if(sleep < 5) {
			sleep = 5;
		}
		this.expectedNextTime = en + sleep;
		if(this.running) {
			window.setTimeout($bind(this,this.loop),sleep + 0.5 | 0);
		}
	}
	,time: function() {
		return new Date().getTime();
	}
};
var oimo_js_graphics_OGraphics2D = function(canvasRenderingContext2D) {
	this.g2d = canvasRenderingContext2D;
};
oimo_js_graphics_OGraphics2D.__name__ = true;
oimo_js_graphics_OGraphics2D.prototype = {
	background: function(r,g,b) {
		var tmp = this.g2d.fillStyle;
		this.g2d.fillStyle = "rgb(" + (255 * r + 0.5 | 0) + "," + (255 * g + 0.5 | 0) + "," + (255 * b + 0.5 | 0) + ")";
		this.g2d.fillRect(0,0,this.g2d.canvas.width,this.g2d.canvas.height);
		this.g2d.fillStyle = tmp;
	}
	,fill: function(r,g,b,a) {
		if(a == null) {
			a = 1.0;
		}
		this.g2d.fillStyle = "rgba(" + (255 * r + 0.5 | 0) + "," + (255 * g + 0.5 | 0) + "," + (255 * b + 0.5 | 0) + "," + a + ")";
		this.fillEnabled = true;
	}
	,noFill: function() {
		this.fillEnabled = false;
	}
	,stroke: function(r,g,b,a) {
		if(a == null) {
			a = 1.0;
		}
		this.g2d.strokeStyle = "rgba(" + (255 * r + 0.5 | 0) + "," + (255 * g + 0.5 | 0) + "," + (255 * b + 0.5 | 0) + "," + a + ")";
		this.strokeEnabled = true;
	}
	,noStroke: function() {
		this.strokeEnabled = false;
	}
	,strokeWeight: function(strokeWeight) {
		this.g2d.lineWidth = strokeWeight;
	}
	,rect: function(x,y,w,h) {
		if(this.fillEnabled) {
			this.g2d.fillRect(x,y,w,h);
		}
		if(this.strokeEnabled) {
			this.g2d.strokeRect(x,y,w,h);
		}
	}
	,circle: function(x,y,r) {
		this.g2d.beginPath();
		this.g2d.arc(x,y,r,0,Math.PI * 2,false);
		if(this.fillEnabled) {
			this.g2d.fill();
		}
		if(this.strokeEnabled) {
			this.g2d.stroke();
		}
	}
	,line: function(x1,y1,x2,y2) {
		this.g2d.beginPath();
		this.g2d.moveTo(x1,y1);
		this.g2d.lineTo(x2,y2);
		this.g2d.stroke();
	}
	,blendMode: function(mode) {
		switch(mode[1]) {
		case 0:
			this.g2d.globalCompositeOperation = "source-over";
			break;
		case 1:
			this.g2d.globalCompositeOperation = "lighter";
			break;
		case 2:
			this.g2d.globalCompositeOperation = "multiply";
			break;
		case 3:
			this.g2d.globalCompositeOperation = "screen";
			break;
		}
	}
	,push: function() {
		this.g2d.save();
	}
	,pop: function() {
		this.g2d.restore();
	}
	,scale: function(x,y) {
		this.g2d.scale(x,y);
	}
	,translate: function(x,y) {
		this.g2d.translate(x,y);
	}
	,image: function(img,sx,sy,sw,sh,dx,dy,dw,dh) {
		this.g2d.imageSmoothingEnabled = false;
		this.g2d.msImageSmoothingEnabled = false;
		this.g2d.drawImage(img.canvas,sx,sy,sw,sh,dx,dy,dw,dh);
	}
	,imageSmooth: function(img,sx,sy,sw,sh,dx,dy,dw,dh) {
		this.g2d.imageSmoothingEnabled = true;
		this.g2d.msImageSmoothingEnabled = true;
		this.g2d.drawImage(img.canvas,sx,sy,sw,sh,dx,dy,dw,dh);
	}
};
var oimo_js_graphics_OImage = function(width,height,graphicsMode) {
	this.width = width;
	this.height = height;
	this.pixels = new Array(width * height);
	this.canvas = window.document.createElement("canvas");
	this.canvas.width = width;
	this.canvas.height = height;
	switch(graphicsMode[1]) {
	case 0:
		this.c2d = null;
		this.gl = js_html__$CanvasElement_CanvasUtil.getContextWebGL(this.canvas,null);
		break;
	case 1:
		this.c2d = this.canvas.getContext("2d",null);
		this.gl = null;
		break;
	}
};
oimo_js_graphics_OImage.__name__ = true;
oimo_js_graphics_OImage.prototype = {
	getPixels: function() {
		this.imageData = this.c2d.getImageData(0,0,this.width,this.height);
		var num = this.width * this.height;
		var index = 0;
		var _g1 = 0;
		while(_g1 < num) {
			this.pixels[_g1++] = this.imageData.data[index + 3] << 24 | this.imageData.data[index] << 16 | this.imageData.data[index + 1] << 8 | this.imageData.data[index + 2];
			index += 4;
		}
	}
	,setPixels: function() {
		var num = this.width * this.height;
		var index = 0;
		var _g1 = 0;
		while(_g1 < num) {
			var i = _g1++;
			var a = this.pixels[i] >>> 24;
			var g = this.pixels[i] >>> 8 & 255;
			var b = this.pixels[i] & 255;
			this.imageData.data[index] = this.pixels[i] >>> 16 & 255;
			this.imageData.data[index + 1] = g;
			this.imageData.data[index + 2] = b;
			this.imageData.data[index + 3] = a;
			index += 4;
		}
		this.c2d.putImageData(this.imageData,0,0);
	}
};
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = function(){ return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; o.hx__closures__[m.__id__] = f; } return f; }
String.__name__ = true;
Array.__name__ = true;
Date.__name__ = ["Date"];
var __map_reserved = {}
GameJam1702.main();
})();
